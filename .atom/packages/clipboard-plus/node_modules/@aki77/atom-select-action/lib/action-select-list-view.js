// Generated by CoffeeScript 1.9.3
(function() {
  var $, ActionSelectListView, SelectActionsView, SelectItemsView, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = require('atom-space-pen-views').$;

  _ = require('underscore-plus');

  SelectItemsView = require('./select-items-view');

  SelectActionsView = require('./select-actions-view');

  module.exports = ActionSelectListView = (function() {
    ActionSelectListView.prototype.selectedItem = null;

    ActionSelectListView.prototype.toggling = false;

    ActionSelectListView.prototype.panelClass = null;

    function ActionSelectListView(arg) {
      var actions, filterKey, items;
      actions = arg.actions, items = arg.items, filterKey = arg.filterKey;
      this.restoreFocus = bind(this.restoreFocus, this);
      this.toggleView = bind(this.toggleView, this);
      this.selectedAction = bind(this.selectedAction, this);
      this.defaultAction = bind(this.defaultAction, this);
      this.setActions(actions);
      this.views = new Map();
      this.views.set('items', new SelectItemsView({
        items: items,
        filterKey: filterKey,
        contentForItem: this.contentForItem,
        panelClass: this.panelClass,
        callback: this.defaultAction
      }));
      this.views.set('actions', new SelectActionsView({
        actions: this.actions,
        panelClass: this.panelClass,
        callback: this.selectedAction
      }));
      this.views.forEach((function(_this) {
        return function(view) {
          view.restoreFocus = _this.restoreFocus;
          return atom.commands.add(view.element, 'select-list:select-action', _this.toggleView);
        };
      })(this));
    }

    ActionSelectListView.prototype.destroy = function() {
      this.views.forEach(function(view) {
        return view.destroy();
      });
      return this.views.clear();
    };

    ActionSelectListView.prototype.contentForItem = function(item, filterQuery, filterKey) {
      throw new Error("Subclass must implement a contentForItem(item, filterQuery) method");
    };

    ActionSelectListView.prototype.setActions = function(actions) {
      if (_.isFunction(actions)) {
        actions = [
          {
            callback: actions
          }
        ];
      }
      return this.actions = actions;
    };

    ActionSelectListView.prototype.toggle = function() {
      if (this.isShow()) {
        return this.hide();
      } else {
        return this.show();
      }
    };

    ActionSelectListView.prototype.isShow = function() {
      var isShow;
      isShow = false;
      this.views.forEach(function(view) {
        if (view.isShow()) {
          return isShow = true;
        }
      });
      return isShow;
    };

    ActionSelectListView.prototype.show = function() {
      this.storeFocusedElement();
      return this.views.get('items').show();
    };

    ActionSelectListView.prototype.hide = function() {
      return this.views.forEach(function(view) {
        return view.hide();
      });
    };

    ActionSelectListView.prototype.defaultAction = function(item) {
      return this.actions[0].callback(item);
    };

    ActionSelectListView.prototype.selectedAction = function(action) {
      if (!this.selectedItem) {
        return;
      }
      return action.callback(this.selectedItem);
    };

    ActionSelectListView.prototype.toggleView = function() {
      if (this.actions.length < 2) {
        return;
      }
      this.toggling = true;
      if (this.views.get('items').isShow()) {
        this.selectedItem = this.views.get('items').getSelectedItem();
        if (this.selectedItem != null) {
          this.views.get('actions').show(false);
        }
      } else {
        this.views.get('items').show(false);
      }
      return this.toggling = false;
    };

    ActionSelectListView.prototype.storeFocusedElement = function() {
      return this.previouslyFocusedElement = $(document.activeElement);
    };

    ActionSelectListView.prototype.restoreFocus = function() {
      var ref;
      if (this.toggling) {
        return;
      }
      return (ref = this.previouslyFocusedElement) != null ? ref.focus() : void 0;
    };

    return ActionSelectListView;

  })();

}).call(this);
