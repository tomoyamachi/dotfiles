// Generated by CoffeeScript 1.9.3
(function() {
  var BaseSelectListView, SelectListView,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  SelectListView = require('atom-space-pen-views').SelectListView;

  module.exports = BaseSelectListView = (function(superClass) {
    extend(BaseSelectListView, superClass);

    function BaseSelectListView() {
      return BaseSelectListView.__super__.constructor.apply(this, arguments);
    }

    BaseSelectListView.prototype.panelClass = null;

    BaseSelectListView.prototype.initialize = function(arg) {
      this.callback = arg.callback, this.panelClass = arg.panelClass;
      BaseSelectListView.__super__.initialize.apply(this, arguments);
      return this.addClass('with-action');
    };

    BaseSelectListView.prototype.cancel = function() {
      var lastSearch;
      lastSearch = this.getFilterQuery();
      BaseSelectListView.__super__.cancel.apply(this, arguments);
      this.filterEditorView.setText(lastSearch);
      return this.filterEditorView.getModel().selectAll();
    };

    BaseSelectListView.prototype.destroy = function() {
      var ref;
      this.cancel();
      return (ref = this.panel) != null ? ref.destroy() : void 0;
    };

    BaseSelectListView.prototype.confirmed = function(item) {
      this.callback(item);
      return this.cancel();
    };

    BaseSelectListView.prototype.show = function(populate) {
      if (populate == null) {
        populate = true;
      }
      if (populate) {
        this.filterEditorView.setText('');
        if (typeof this.populate === "function") {
          this.populate();
        }
      }
      if (this.panel == null) {
        this.panel = atom.workspace.addModalPanel({
          item: this,
          className: this.panelClass
        });
      }
      this.panel.show();
      return this.focusFilterEditor();
    };

    BaseSelectListView.prototype.hide = function() {
      var ref;
      return (ref = this.panel) != null ? ref.hide() : void 0;
    };

    BaseSelectListView.prototype.isShow = function() {
      var ref;
      return !!((ref = this.panel) != null ? ref.isVisible() : void 0);
    };

    BaseSelectListView.prototype.toggle = function() {
      if (this.isShow()) {
        return this.cancel();
      } else {
        return this.show();
      }
    };

    BaseSelectListView.prototype.cancelled = function() {
      return this.hide();
    };

    return BaseSelectListView;

  })(SelectListView);

}).call(this);
