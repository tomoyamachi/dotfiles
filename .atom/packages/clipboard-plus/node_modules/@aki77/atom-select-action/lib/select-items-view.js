// Generated by CoffeeScript 1.9.3
(function() {
  var $$, BaseSelectListView, SelectItemsView, _,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  $$ = require('atom-space-pen-views').$$;

  _ = require('underscore-plus');

  BaseSelectListView = require('./base-select-list-view');

  module.exports = SelectItemsView = (function(superClass) {
    extend(SelectItemsView, superClass);

    function SelectItemsView() {
      return SelectItemsView.__super__.constructor.apply(this, arguments);
    }

    SelectItemsView.prototype.searchIndexKeys = [];

    SelectItemsView.prototype.initialize = function(arg) {
      var items;
      items = arg.items, this.filterKey = arg.filterKey, this.contentForItem = arg.contentForItem;
      SelectItemsView.__super__.initialize.apply(this, arguments);
      this._items = items;
      if (_.isArray(this.filterKey)) {
        this.searchIndexKeys = this.filterKey.slice();
        return this.filterKey = "_" + (this.filterKey.join('_'));
      }
    };

    SelectItemsView.prototype.getFilterKey = function() {
      return this.filterKey;
    };

    SelectItemsView.prototype.setItems = function(items) {
      var filterKey, i, item, len;
      if (items == null) {
        items = [];
      }
      if (this.searchIndexKeys.length > 0) {
        filterKey = this.getFilterKey();
        for (i = 0, len = items.length; i < len; i++) {
          item = items[i];
          item[filterKey] = this.searchIndexKeys.map(function(key) {
            return item[key];
          }).join('');
        }
      }
      return SelectItemsView.__super__.setItems.call(this, items);
    };

    SelectItemsView.prototype.viewForItem = function(item) {
      var fn;
      fn = this.contentForItem(item, this.getFilterQuery(), this.getFilterKey());
      return $$(function() {
        var highlighter;
        highlighter = (function(_this) {
          return function(text, matches, offsetIndex) {
            var i, lastIndex, len, matchIndex, matchedChars, unmatched;
            lastIndex = 0;
            matchedChars = [];
            for (i = 0, len = matches.length; i < len; i++) {
              matchIndex = matches[i];
              matchIndex -= offsetIndex;
              if (matchIndex < 0) {
                continue;
              }
              unmatched = text.substring(lastIndex, matchIndex);
              if (unmatched) {
                if (matchedChars.length) {
                  _this.span(matchedChars.join(''), {
                    "class": 'character-match'
                  });
                }
                matchedChars = [];
                _this.text(unmatched);
              }
              matchedChars.push(text[matchIndex]);
              lastIndex = matchIndex + 1;
            }
            if (matchedChars.length) {
              _this.span(matchedChars.join(''), {
                "class": 'character-match'
              });
            }
            return _this.text(text.substring(lastIndex));
          };
        })(this);
        return fn.call(this, {
          highlighter: highlighter
        });
      });
    };

    SelectItemsView.prototype.populate = function() {
      var items;
      items = _.result(this, '_items');
      if (_.isArray(items)) {
        return this.setItems(items);
      }
      delete this.items;
      this.list.empty();
      this.setLoading("Loading\u2026");
      return items.then((function(_this) {
        return function(result) {
          return _this.setItems(result);
        };
      })(this));
    };

    return SelectItemsView;

  })(BaseSelectListView);

}).call(this);
